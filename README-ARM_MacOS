Author: Ryan Wiseman
README Summary: A detailed way of getting SDL2 to work on M1/ARM Based Mac Devices
via VSCode. 

The switch from Apple's x86 processor meant that locating header files changed
completely. If you have installed SDL2 via Homebrew, this manual is for you.

What changed from x86 to ARM for homebrew is that third party libraries cannot
be natively run. Understandably since Apple cares about the security of its devices,
if you wish to run SDL2 via VSCode, there is a specific ARM based compatibility layer
that now is written so users aren't asking: "Why is my SDL2.h header file missing?"

Let's do a breakdown of how this configuration works, so if you decide to store
these libraries on an external drive, you must change the path configuratins to
wherever SDL2 is located. This is arguably more complex, and you save yourself 
hassle by keeping it in the /opt/homebrew location. 

It's annoying that Apple has borked sane dynamically linking, but that's okay,
there is a rather simple fix.

In our .vscode Folder, we want a file called c_cpp_properties.json. These are
the settings so that when you work with SDL, you have access to its entire
Intellisense. 

The most barebones starting point to a SDL project will look like this:

{
    "configurations": [
        {
            "name": "Mac",
            "includePath": [
                "${workspaceFolder}/**",
                "/opt/homebrew/Cellar/sdl2/2.30.9/include",
                "/opt/homebrew/Cellar/sdl2_image/2.8.2_2/include",
                "/opt/homebrew/Cellar/sdl2/2.30.9/include/SDL2"
            ],
            "defines": [],
            "macFrameworkPath": [
                "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/System/Library/Frameworks"
            ],
            "compilerPath": "/usr/bin/clang",
            "cStandard": "c17",
            "cppStandard": "c++17",
            "intelliSenseMode": "macos-clang-arm64"
        }
    ],
    "version": 4
}

It was atypical to need to specify an include path given how SDL2 was able
to compile on Intel Macs without needing a specific location that is pointed to.

This file will be able to run on your machine so long as you make sure to change 
any of the version titled folders:
"/opt/homebrew/Cellar/sdl2/Your.Version.Here/include",
"/opt/homebrew/Cellar/sdl2_image/Your.Version.Here/include",
"/opt/homebrew/Cellar/sdl2/Your.Version.Here/include/SDL2"

It is impossible to anticipate every single version of SDL, which is why
you should double check the version you have installed. It can be real easy
to miss that you neglected the sdl_image folder version.


The Makefile I provided is also barebones, given that large SDL projects
can be hundreds of lines of text depending on what libraries you've
decided to use in addition to SDL.

# Compiler
CXX = clang++

# Compiler flags
CXXFLAGS = -std=c++17 -Wall -Wextra -O2

# SDL2 paths
SDL2_INCLUDE = /opt/homebrew/Cellar/sdl2/2.30.9/include
SDL2_LIB = /opt/homebrew/Cellar/sdl2/2.30.9/lib

# SDL2_image paths
SDL2_IMAGE_INCLUDE = /opt/homebrew/Cellar/sdl2_image/2.8.2_2/include
SDL2_IMAGE_LIB = /opt/homebrew/Cellar/sdl2_image/2.8.2_2/lib

# Include and library flags
INCLUDE_FLAGS = -isystem $(SDL2_INCLUDE)/SDL2 -isystem $(SDL2_INCLUDE) -isystem $(SDL2_IMAGE_INCLUDE)
LIB_FLAGS = -L$(SDL2_LIB) -L$(SDL2_IMAGE_LIB) -lSDL2 -lSDL2_image

# Target executable
TARGET = sdl_window

# Source files
SRCS = main.cpp

# Object files
OBJS = $(SRCS:.cpp=.o)

# Default target
all: $(TARGET)

# Link the object files to create the executable
$(TARGET): $(OBJS)
	$(CXX) $(CXXFLAGS) $(OBJS) $(LIB_FLAGS) -o $(TARGET)

# Compile the source files into object files
%.o: %.cpp
	$(CXX) $(CXXFLAGS) $(INCLUDE_FLAGS) -c $< -o $@

# Run the application
run: $(TARGET)
	./$(TARGET)

# Clean up build files
clean:
	rm -f $(OBJS) $(TARGET)

# Phony targets
.PHONY: all clean run


Once again, keep in mind that these files also have a version that needs
to be modified:
SDL2_INCLUDE = /opt/homebrew/Cellar/sdl2/2.30.9/include
SDL2_LIB = /opt/homebrew/Cellar/sdl2/2.30.9/lib

SDL2_IMAGE_INCLUDE = /opt/homebrew/Cellar/sdl2_image/2.8.2_2/include
SDL2_IMAGE_LIB = /opt/homebrew/Cellar/sdl2_image/2.8.2_2/lib


Once everything is updated to reflect the version of SDL2 you are running,
you can now include the headers into your main.cpp file. 

They are:
#include <SDL2/SDL.h>
#include <SDL2/SDL_image.h>

You may have to use the quick fix solution in VSCode to update said paths. This 
is just VSCode wanting your main file to link with the .json file. 



These are the fundamentals of what you need for SDL to compile in VSCode for
ARM Based Macs. If a problem persists, feel free to either update this documentation
or reach out to me on Discord @ryanwiseman. If all else fails before you contact me, 
copy my code, it'll save the war by 50 years.
